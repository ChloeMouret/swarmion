on:
  pull_request:
    types: [opened, synchronize, reopened]

# cancel previous runs on the same PR
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

name: ⛷ PR tests

env:
  CI: true
  NODE_VERSION: 16

defaults:
  run:
    shell: bash

jobs:
  build-lint:
    name: 🚀 Build and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v3
      - name: Install & cache node dependencies
        uses: ./.github/actions/install-node-deps
      - name: Package and cache builds
        uses: ./.github/actions/package
      - name: '🧪 Test linter'
        run: pnpm nx affected --target=test-linter --parallel=2
      - name: '🧪 Test type'
        run: pnpm nx affected --target=test-type --parallel=2
      - name: '🧪 Test unit'
        run: pnpm nx affected --target=test-unit --parallel=2
      - name: '🧪 Test circular'
        run: pnpm nx affected --target=test-circular --parallel=2

  build:
    name: 🏗 Build Project
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      affected_apps: ${{ steps.get-project-changes.outputs.affected_apps }}
      affected_libs: ${{ steps.get-project-changes.outputs.affected_libs }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - name: Install & cache node dependencies
        uses: ./.github/actions/install-node-deps
      - name: Package and cache builds
        uses: ./.github/actions/package
      - name: Get project changes
        id: get-project-changes
        uses: ./.github/actions/get-project-changes

  app-unit-tests-and-sonar:
    name: 🏛 ${{ matrix.AFFECTED_APP }} - App Unit Tests and Sonar
    needs: build
    runs-on: ubuntu-latest
    if: join(fromJson(needs.build.outputs.affected_apps)) != ''
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        AFFECTED_APP: ${{ fromJson(needs.build.outputs.affected_apps) }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - name: Run unit tests and sonar
        uses: ./.github/actions/unit-tests-and-sonar
        with:
          path: ${{ matrix.AFFECTED_APP }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}

  library-unit-tests-and-sonar:
    name: 📚 ${{ matrix.AFFECTED_LIB }} - Library Unit Tests and Sonar
    needs: build
    runs-on: ubuntu-latest
    if: join(fromJson(needs.build.outputs.affected_libs)) != ''
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        AFFECTED_LIB: ${{ fromJson(needs.build.outputs.affected_libs) }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - name: Run unit tests and sonar
        uses: ./.github/actions/unit-tests-and-sonar
        with:
          path: ${{ matrix.AFFECTED_LIB }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}

  validate-pr:
    name: ✅ Validate the PR
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      [
        build-lint,
        build,
        library-unit-tests-and-sonar,
        app-unit-tests-and-sonar,
      ]
    steps:
      - name: Validate build-lint
        run: |
          if [[ ${{ needs.build-lint.result }} = "failure" ]]; then
            echo "build-lint failed"
            exit 1
          fi
      - name: Validate build
        run: |
          if [[ ${{ needs.build.result }} = "failure" ]]; then
            echo "build failed"
            exit 1
          fi
      - name: Validate app tests
        run: |
          if [[ ${{ needs.app-unit-tests-and-sonar.result }} = "failure" ]]; then
            echo "App tests failed"
            exit 1
          fi
      - name: Validate library tests
        run: |
          if [[ ${{ needs.library-unit-tests-and-sonar.result }} = "failure" ]]; then
            echo "Library tests failed"
            exit 1
          fi

  deploy-docs-preview-to-netlify:
    name: 🚀 Deploy docs preview to Netlify
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install & cache node dependencies
        uses: ./.github/actions/install-node-deps
      - name: Build docs
        run: |
          cd user-docs/documentation
          pnpm build
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './user-docs/documentation/build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: '#${{ github.event.number }}: ${{ github.event.pull_request.title }}'
          enable-pull-request-comment: true
          overwrites-pull-request-comment: true
          alias: docs-preview-${{ github.event.number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 1
